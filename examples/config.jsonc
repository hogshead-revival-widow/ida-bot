/*

    Hier kannst Du allgemeine Konfigurationen vornehmen.
    Ahängig von dieser Konfiguration wird auch das Manifest generiert.
    Manuelle Änderungen am Manifest sind daher nicht nötig.

    Alle hier stehenden Werte sind Beispielwerte und müssen angepasst werden.
    Kopiere diese Datei nach der Anpassung in `src/settings/config.json`

    Alle Schüssel MÜSSEN vorhanden sein.

    Ausschließlich folgende Schlüssel KÖNNEN leere Werte haben:
        * HOST_PERMISSIONS: Kann ein leeres Array sein
        * SEARCH_PARAMS: Kann ein leeres Array sein.

    Alle anderen Schlüssel MÜSSEN die Werte vom gleichen Typ
    besitzen, wie sie in den untenstehenden Beispielen erläutert werden.

*/
{
    "NAME": "IDA-Bot",
    "RFA": "XYZ",
    "DESCRIPTION": "Vereinfacht die Suche im Pressearchiv",
    "REPOSITORY": "https://github.com/hogshead-revival-widow/ida-bot",
    // CONTACT: Email, unter der
    // Nutzer:innen bei nicht-technischen Fragen nachfragen können
    "CONTACT": "email@example.com",
    "VERSION": "0.1",
    // HOST_PERMISSIONS: Das Array kann auch leer sein
    // vgl. https://developer.chrome.com/docs/extensions/mv3/declare_permissions/
    "HOST_PERMISSIONS": ["*://adfs.rfa.de/*"],
    "POPUP_TITLE": "IDA-Bot",
    "URL": {
        // HOST: Muss HTTPS sein, wird automatisch in HOST_PERMISSIONS übernommen
        "HOST": "https://zum-beispiel-pressearchiv.de",
        // FALLBACK_HOST: Kann leer sein; wenn gesetzt, gilt das gleiche wie für HOST
        "FALLBACK_HOST": "https://applikations-proxy.de?redirect=zum-beispiel-pressearchiv.de",
        "PATHS": {
            // ITEM: URL-Template aus dem die URL, die auf den gefundenen Artikel verweist,
            // generiert werden soll.
            // Der Pfad KANN die Variabel `{resultId}` enthalten; diese wird dann mit der
            // ID des gefundenen Artikels ersetzt.
            "ITEM": "/item/{resultId}",
            // SEARCH: Pfad zur Suche
            "SEARCH": "/search",
            // PDF: URL-Template aus dem die URL, dei auf die PDF des gefunden Artikels verweist,
            // generiert werden soll.
            // Der Pfad KANN alle aufgeführten Variablen enthalten; diese werden dann
            // mit den gleichnamigen Werten aus den XML-Repräsentation des Artikels
            // in der Datenbank  ersetzt. Die Werte aller Variablen außer `mediumKey` werden mit
            // `encodeURIComponent` enkodiert.
            "PDF": "/pdf/{name}.pdf?path={providerId}/{classicStationId}/undefined/undefined/{dukey}/{duStation}/{mediumKey}/{mediumStation}?quality=QF",
            // XML: URL-Template aus dem die URL, die auf die XML-Repräsentation des Artikels verweist,
            // generiert werden soll.
            // Der Pfad KANN die Variabel `{resultId}` enthalten; diese wird dann mit der
            // ID des gefundenen Artikels ersetzt.
            "XML": "/xml"
        }
    },
    // SEARCH_PARAMS: Such-Paramater, mit denen die Suche durchgeführt wird.
    // Wenn kein leerer Array, muss es ein Array von String-Tupeln sein.
    "SEARCH_PARAMS": [["key", "value"]],
    // REPLACE_IN_QUERY: Erwartet reguläre Ausdrücke (`pattern`), ggf. Flags (`flags`, kann auch ein leerer String sein
    // sowie einen Ersetzungswert (`replaceWith`). Daraus wird `"abc".replace(new RegExp(pattern, flags), replaceWith)
    // generiert; gibt es mehrere Ersetzungsanweisungen, werden diese nacheinander abgearbeitet.
    // Soll keine Ersetzung passieren, muss ein leerer Array übergeben werden.
    "REPLACE_IN_QUERY": [
        {
            // im Beispiel werden alle Sonderzeichen (inkl. Whitespaces)
            // außer alphanumerische Zeichen
            // (inklusive Umlauten und ähnlichen Zeichen erweiterter Alphabete)
            // durch ein Leerzeichen ersetzt.
            "pattern": "[^(0-9 a-zA-Z\\x7f-\\xff \\w)]",
            "flags": "gmu",
            "replaceWith": " "
        }
    ]
}
